[main]
passwordService=org.apache.shiro.authc.credential.DefaultPasswordService
#定义散列密码（默认SHA-256算法）
hashService=org.apache.shiro.crypto.hash.DefaultHashService
passwordService.hashService=$hashService

#用于对散列出的值进行格式化，默认是Shiro1CryptFormat,另外提供了Base64Format和HexFormat
#对于有salt的密码请自定义实现ParsableHashFormat然后把salt格式化到散列值中
hashFormat=org.apache.shiro.crypto.hash.format.Shiro1CryptFormat
passwordService.hashFormat=$hashFormat

#hashFormatFactory 用于根据散列值得到散列的密码和 salt
#因为如果使用如 SHA 算法，那么会生成一个 salt，此 salt 需要保存到散列后的值中以便之后与传入的密码比较时使用
#默认使用 DefaultHashFormatFactory
hashFormatFactory=org.apache.shiro.crypto.hash.format.DefaultHashFormatFactory
passwordService.hashFormatFactory=$hashFormatFactory

#密码匹配,其是一个 CredentialsMatcher 实现
passwordMatcher=org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService=$passwordService

#配置JDBC数据库连接
dataSource=com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql://localhost:3306/shiro
dataSource.username=hechanghui
dataSource.password=100640

jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource=$dataSource
jdbcRealm.permissionsLookupEnabled=true

#将 credentialsMatcher赋值给myRealm,myRealm间接继承了AuthenticatingRealm,其在调用getAuthenticationInfo方法获取到
#AuthenticationInfo信息后，会使用credentialsMatcher来验证凭证是否匹配，如果不匹配将抛出IncorrectCredentialsException异常
jdbcRealm.credentialsMatcher=$passwordMatcher
securityManager.realms=$jdbcRealm